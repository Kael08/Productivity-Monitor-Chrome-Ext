let blacklist = [];
let intervalId = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
function checkAllTabs(tabs) {
    tabs.forEach(tab => {
        if (tab.url && blacklist.some(url => tab.url.includes(url))) {
            console.log(`‚ùå –ó–∞–∫—Ä—ã–≤–∞—é –≤–∫–ª–∞–¥–∫—É —Å URL: ${tab.url}`);
            chrome.tabs.remove(tab.id);
        }
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
function startTabCheckInterval() {
    if (intervalId) {
        clearInterval(intervalId); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±—ã–ª
    }
    intervalId = setInterval(() => {
        chrome.tabs.query({}, checkAllTabs);
    }, 5000);
    console.log("üîÉ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∑–∞–ø—É—â–µ–Ω (5 —Å–µ–∫)");
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket-—Å–µ—Ä–≤–µ—Ä—É
function connectToWebSocket() {
    const socket = new WebSocket('ws://localhost:8081');

    socket.onopen = () => {
        console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω");
        startTabCheckInterval(); // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    };

    socket.onmessage = (event) => {
        console.log("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", event.data);
        const data = JSON.parse(event.data);
        if (data.type === 'update_blacklist') {
            blacklist = data.urls;
            chrome.tabs.query({}, checkAllTabs); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ä–∞–∑—É
        }
    };

    socket.onerror = (e) => {
        console.error("‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞", e);
    };

    socket.onclose = () => {
        console.log("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
        if (intervalId) {
            clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        }
    };
}

connectToWebSocket();